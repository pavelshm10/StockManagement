{"version":3,"sources":["../../../../packages/vite/plugins/nx-tsconfig-paths.plugin.ts"],"sourcesContent":["import {\n  createProjectGraphAsync,\n  joinPathFragments,\n  stripIndents,\n  workspaceRoot,\n} from '@nx/devkit';\nimport { copyFileSync, existsSync } from 'node:fs';\nimport { join, relative, resolve } from 'node:path';\nimport {\n  loadConfig,\n  createMatchPath,\n  MatchPath,\n  ConfigLoaderSuccessResult,\n} from 'tsconfig-paths';\nimport {\n  calculateProjectBuildableDependencies,\n  createTmpTsConfig,\n} from '@nx/js/src/utils/buildable-libs-utils';\nimport { Plugin } from 'vite';\nimport { nxViteBuildCoordinationPlugin } from './nx-vite-build-coordination.plugin';\nimport { findFile } from '../src/utils/nx-tsconfig-paths-find-file';\nimport { isUsingTsSolutionSetup } from '@nx/js/src/utils/typescript/ts-solution-setup';\nimport { getProjectTsConfigPath } from '../src/utils/options-utils';\n\nexport interface nxViteTsPathsOptions {\n  /**\n   * Enable debug logging\n   * If set to false, it will always ignore the debug logging even when `--verbose` or `NX_VERBOSE_LOGGING` is set to true.\n   * @default undefined\n   **/\n  debug?: boolean;\n  /**\n   * export fields in package.json to use for resolving\n   * @default [['exports', '.', 'import'], 'module', 'main']\n   *\n   * fallback resolution will use ['main', 'module']\n   **/\n  mainFields?: (string | string[])[];\n  /**\n   * extensions to check when resolving files when package.json resolution fails\n   * @default ['.ts', '.tsx', '.js', '.jsx', '.json', '.mjs', '.cjs']\n   **/\n  extensions?: string[];\n  /**\n   * Inform Nx whether to use the raw source or to use the built output for buildable dependencies.\n   * Set to `false` to use incremental builds.\n   * @default true\n   */\n  buildLibsFromSource?: boolean;\n}\n\nexport function nxViteTsPaths(options: nxViteTsPathsOptions = {}) {\n  let foundTsConfigPath: string;\n  let matchTsPathEsm: MatchPath;\n  let matchTsPathFallback: MatchPath | undefined;\n  let tsConfigPathsEsm: ConfigLoaderSuccessResult;\n  let tsConfigPathsFallback: ConfigLoaderSuccessResult;\n\n  options.extensions ??= [\n    '.ts',\n    '.tsx',\n    '.js',\n    '.jsx',\n    '.json',\n    '.mts',\n    '.mjs',\n    '.cts',\n    '.cjs',\n    '.css',\n    '.scss',\n    '.less',\n  ];\n  options.mainFields ??= [['exports', '.', 'import'], 'module', 'main'];\n  options.buildLibsFromSource ??= true;\n  let projectRoot = '';\n\n  return {\n    name: 'nx-vite-ts-paths',\n    // Ensure the resolveId aspect of the plugin is called before vite's internal resolver\n    // Otherwise, issues can arise with Yarn Workspaces and Pnpm Workspaces\n    enforce: 'pre',\n    async configResolved(config: any) {\n      projectRoot = config.root;\n      const projectRootFromWorkspaceRoot = relative(workspaceRoot, projectRoot);\n      foundTsConfigPath = getTsConfig(\n        process.env.NX_TSCONFIG_PATH ??\n          join(\n            workspaceRoot,\n            'tmp',\n            projectRootFromWorkspaceRoot,\n            process.env.NX_TASK_TARGET_TARGET ?? 'build',\n            'tsconfig.generated.json'\n          )\n      );\n\n      if (!foundTsConfigPath) return;\n\n      if (\n        !options.buildLibsFromSource &&\n        !global.NX_GRAPH_CREATION &&\n        config.mode !== 'test'\n      ) {\n        const projectGraph = await createProjectGraphAsync({\n          exitOnError: false,\n          resetDaemonClient: true,\n        });\n        // When using incremental building and the serve target is called\n        // we need to get the deps for the 'build' target instead.\n        const depsBuildTarget =\n          process.env.NX_TASK_TARGET_TARGET === 'serve'\n            ? 'build'\n            : process.env.NX_TASK_TARGET_TARGET;\n        const { dependencies } = calculateProjectBuildableDependencies(\n          undefined,\n          projectGraph,\n          workspaceRoot,\n          process.env.NX_TASK_TARGET_PROJECT,\n          depsBuildTarget,\n          process.env.NX_TASK_TARGET_CONFIGURATION\n        );\n        // This tsconfig is used via the Vite ts paths plugin.\n        // It can be also used by other user-defined Vite plugins (e.g. for creating type declaration files).\n        foundTsConfigPath = createTmpTsConfig(\n          foundTsConfigPath,\n          workspaceRoot,\n          relative(workspaceRoot, projectRoot),\n          dependencies,\n          true\n        );\n\n        if (config.command === 'serve') {\n          const buildableLibraryDependencies = dependencies\n            .filter((dep) => dep.node.type === 'lib')\n            .map((dep) => dep.node.name)\n            .join(',');\n          const buildCommand = `npx nx run-many --target=${depsBuildTarget} --projects=${buildableLibraryDependencies}`;\n          config.plugins.push(nxViteBuildCoordinationPlugin({ buildCommand }));\n        }\n      }\n\n      const parsed = loadConfig(foundTsConfigPath);\n\n      logIt('first parsed tsconfig: ', parsed);\n      if (parsed.resultType === 'failed') {\n        throw new Error(`Failed loading tsconfig at ${foundTsConfigPath}`);\n      }\n      tsConfigPathsEsm = parsed;\n\n      matchTsPathEsm = createMatchPath(\n        parsed.absoluteBaseUrl,\n        parsed.paths,\n        options.mainFields\n      );\n\n      const rootLevelTsConfig = getTsConfig(\n        join(workspaceRoot, 'tsconfig.base.json')\n      );\n      const rootLevelParsed = loadConfig(rootLevelTsConfig);\n      logIt('fallback parsed tsconfig: ', rootLevelParsed);\n      if (rootLevelParsed.resultType === 'success') {\n        tsConfigPathsFallback = rootLevelParsed;\n        matchTsPathFallback = createMatchPath(\n          rootLevelParsed.absoluteBaseUrl,\n          rootLevelParsed.paths,\n          ['main', 'module']\n        );\n      }\n    },\n    resolveId(importPath: string) {\n      // Let other resolvers handle this path.\n      if (!foundTsConfigPath) return null;\n\n      let resolvedFile: string;\n      try {\n        resolvedFile = matchTsPathEsm(importPath);\n      } catch (e) {\n        logIt('Using fallback path matching.');\n        resolvedFile = matchTsPathFallback?.(importPath);\n      }\n\n      if (!resolvedFile || !existsSync(resolvedFile)) {\n        if (tsConfigPathsEsm || tsConfigPathsFallback) {\n          logIt(\n            `Unable to resolve ${importPath} with tsconfig paths. Using fallback file matching.`\n          );\n          resolvedFile =\n            loadFileFromPaths(tsConfigPathsEsm, importPath) ||\n            loadFileFromPaths(tsConfigPathsFallback, importPath);\n        } else {\n          logIt(`Unable to resolve ${importPath} with tsconfig paths`);\n        }\n      }\n\n      logIt(`Resolved ${importPath} to ${resolvedFile}`);\n      // Returning null defers to other resolveId functions and eventually the default resolution behavior\n      // https://rollupjs.org/plugin-development/#resolveid\n      return resolvedFile || null;\n    },\n    async writeBundle(options) {\n      if (isUsingTsSolutionSetup()) return;\n      const outDir = options.dir || 'dist';\n      const src = resolve(projectRoot, 'package.json');\n      if (existsSync(src)) {\n        const dest = join(outDir, 'package.json');\n\n        try {\n          copyFileSync(src, dest);\n        } catch (err) {\n          console.error('Error copying package.json:', err);\n        }\n      }\n    },\n  } as Plugin;\n\n  function getTsConfig(preferredTsConfigPath: string): string {\n    const projectTsConfigPath = getProjectTsConfigPath(projectRoot);\n    return [\n      resolve(preferredTsConfigPath),\n      projectTsConfigPath ? resolve(projectTsConfigPath) : null,\n      resolve(join(workspaceRoot, 'tsconfig.base.json')),\n      resolve(join(workspaceRoot, 'tsconfig.json')),\n      resolve(join(workspaceRoot, 'jsconfig.json')),\n    ]\n      .filter(Boolean)\n      .find((tsPath) => {\n        if (existsSync(tsPath)) {\n          logIt('Found tsconfig at', tsPath);\n          return tsPath;\n        }\n      });\n  }\n\n  function logIt(...msg: any[]) {\n    if (process.env.NX_VERBOSE_LOGGING === 'true' && options?.debug !== false) {\n      console.debug('\\n[Nx Vite TsPaths]', ...msg);\n    }\n  }\n\n  function loadFileFromPaths(\n    tsconfig: ConfigLoaderSuccessResult,\n    importPath: string\n  ) {\n    logIt(\n      `Trying to resolve file from config in ${tsconfig.configFileAbsolutePath}`\n    );\n    let resolvedFile: string;\n    for (const alias in tsconfig.paths) {\n      const paths = tsconfig.paths[alias];\n\n      const normalizedImport = alias.replace(/\\/\\*$/, '');\n\n      if (\n        importPath === normalizedImport ||\n        importPath.startsWith(normalizedImport + '/')\n      ) {\n        const joinedPath = joinPathFragments(\n          tsconfig.absoluteBaseUrl,\n          paths[0].replace(/\\/\\*$/, '')\n        );\n\n        resolvedFile = findFile(\n          importPath.replace(normalizedImport, joinedPath),\n          options.extensions\n        );\n\n        if (\n          resolvedFile === undefined &&\n          options.extensions.some((ext) => importPath.endsWith(ext))\n        ) {\n          const foundExtension = options.extensions.find((ext) =>\n            importPath.endsWith(ext)\n          );\n          const pathWithoutExtension = importPath\n            .replace(normalizedImport, joinedPath)\n            .slice(0, -foundExtension.length);\n          resolvedFile = findFile(pathWithoutExtension, options.extensions);\n        }\n      }\n    }\n\n    return resolvedFile;\n  }\n}\n"],"names":["nxViteTsPaths","options","foundTsConfigPath","matchTsPathEsm","matchTsPathFallback","tsConfigPathsEsm","tsConfigPathsFallback","extensions","mainFields","buildLibsFromSource","projectRoot","name","enforce","configResolved","config","root","projectRootFromWorkspaceRoot","relative","workspaceRoot","process","getTsConfig","env","NX_TSCONFIG_PATH","join","NX_TASK_TARGET_TARGET","global","NX_GRAPH_CREATION","mode","projectGraph","createProjectGraphAsync","exitOnError","resetDaemonClient","depsBuildTarget","dependencies","calculateProjectBuildableDependencies","undefined","NX_TASK_TARGET_PROJECT","NX_TASK_TARGET_CONFIGURATION","createTmpTsConfig","command","buildableLibraryDependencies","filter","dep","node","type","map","buildCommand","plugins","push","nxViteBuildCoordinationPlugin","parsed","loadConfig","logIt","resultType","Error","createMatchPath","absoluteBaseUrl","paths","rootLevelTsConfig","rootLevelParsed","resolveId","importPath","resolvedFile","e","existsSync","loadFileFromPaths","writeBundle","isUsingTsSolutionSetup","outDir","dir","src","resolve","dest","copyFileSync","err","console","error","preferredTsConfigPath","projectTsConfigPath","getProjectTsConfigPath","Boolean","find","tsPath","msg","NX_VERBOSE_LOGGING","debug","tsconfig","configFileAbsolutePath","alias","normalizedImport","replace","startsWith","joinedPath","joinPathFragments","findFile","some","ext","endsWith","foundExtension","pathWithoutExtension","slice","length"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}